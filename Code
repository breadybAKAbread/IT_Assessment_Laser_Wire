// New WiFi Code
#include <WiFi.h>

// Define WiFi credentials
const char* ssid = "";      // Add your WiFi network name (SSID) here
const char* password = "";  // Add your WiFi password here

// Create a web server on port 80
WiFiServer server(80);

// Variables for laser functionality
String laserStatus = "Not Triggered";  // Variable to store laser status (Triggered/Not Triggered)
int lightReader = 2;                  // Analog pin to read the light sensor input
int freq = 2000;                      // Frequency for the buzzer sound
int x = 0;                            // Variable to store analog sensor reading
int buzzerPin = 12;                   // Digital pin to control the buzzer

void setup() {
  // Start serial communication for debugging
  Serial.begin(115200);

  // Initialize pins and connect to WiFi network
  pinMode(lightReader, INPUT);
  pinMode(buzzerPin, OUTPUT);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // Start the web server
  server.begin();
}

void loop() {
  // Check for incoming client requests
  WiFiClient client = server.available();

  // If there's a client request
  if (client) {
    // Read analog sensor value
    x = analogRead(lightReader);

    // Determine laser status based on the sensor reading
    if (x < 800) {
      laserStatus = "Triggered";
      tone(buzzerPin, freq);  // Turn on the buzzer
    } else {
      laserStatus = "Not Triggered";
      noTone(buzzerPin);  // Turn off the buzzer
    }

    // Send HTTP response to the client
    client.println("HTTP/1.1 200 OK");
    client.println("Content-type:text/html");
    client.println("Connection: close");
    client.println();
    client.println("<!DOCTYPE html><html>");
    client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></head>");
    client.println("<body><h1>ESP32 Web Server</h1>");
    client.println("<p>Laser Status: " + laserStatus + "</p>");
    client.println("</body></html>");
    client.println();
    delay(1);
    client.stop();
  }
}

// Old Working Code//

int ledPin1 = 18;    
int ledPin2 = 4;    
int buzzerPin = 12;  // Buzzer pin
int lightReader = 2; // Photoresistor pin
int freq = 2000;     // Buzzer frequency
int x = 0;           // Initial value for sensor reading

void setup() {
  Serial.begin(9600);
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(lightReader, INPUT);
}

void loop() {
  x = analogRead(lightReader);

  if (x < 800) {
    digitalWrite(ledPin1, LOW);
    digitalWrite(ledPin2, HIGH);
    tone(buzzerPin, freq);
  } else {
    digitalWrite(ledPin1, HIGH);
    digitalWrite(ledPin2, LOW);
    noTone(buzzerPin);
  }
}

